openapi: 3.0.0
info:
  title: Service API
  description: API for Social Network
  version: 1.0.0
  contact:
    name: Ilya Vdovets
    email: ilya.vdovets@gmail.com

paths:
  /users/signup:
    post:
      summary: User signup
      description: Creates a new user with username, password, and email.
      operationId: signup
      requestBody:
        description: User signup data
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: The user's chosen username.
                password:
                  type: string
                  description: The user's password.
                email:
                  type: string
                  format: email
                  description: The user's email address.
              required:
                - username
                - password
                - email
      responses:
        '200':
          description: Signup successful
          headers:
            Set-Cookie:
              description: JWT token for user authentication
              schema:
                type: string
        '400':
          description: Missing required fields or invalid email
        '403':
          description: User already exists

  /users/login:
    post:
      summary: User login
      description: Authenticates a user and creates a session.
      operationId: login
      requestBody:
        description: User login data
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: The user's username.
                password:
                  type: string
                  description: The user's password.
              required:
                - username
                - password
      responses:
        '200':
          description: Login successful
          headers:
            Set-Cookie:
              description: JWT token for user authentication
              schema:
                type: string
        '400':
          description: Missing required fields
        '403':
          description: Invalid credentials
        '404':
          description: User not found
        '409':
          description: Session already exists

  /users/profile:
    get:
      summary: Get user profile
      description: Retrieves the user's profile information based on the JWT token.
      operationId: getProfile
      responses:
        '200':
          description: Profile data returned successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
                  email:
                    type: string
                  created_at:
                    type: string
                    format: date-time
                  phone_number:
                    type: string
                  first_name:
                    type: string
                  last_name:
                    type: string
                  birthdate:
                    type: string
                    format: date
                  bio:
                    type: string
        '400':
          description: Token expired or invalid
        '401':
          description: Missing or invalid token
        '403':
          description: Unauthorized
        '404':
          description: User not found

    put:
      summary: Update user profile
      description: Updates the user's profile information based on the JWT token.
      operationId: updateProfile
      requestBody:
        description: Profile update data
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                phone_number:
                  type: string
                first_name:
                  type: string
                last_name:
                  type: string
                birthdate:
                  type: string
                  format: date
                bio:
                  type: string
      responses:
        '200':
          description: Profile updated successfully
        '400':
          description: Invalid data format
        '401':
          description: Missing or invalid token
        '403':
          description: Unauthorized
        '409':
          description: Error occurred while updating profile

  /users/roles:
    post:
      summary: Assign role to a user
      description: Assigns a role to a user based on the JWT token.
      operationId: assignRole
      requestBody:
        description: Role assignment data
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                role_name:
                  type: string
                  description: The role to be assigned to the user.
              required:
                - role_name
      responses:
        '200':
          description: Role assigned successfully
        '400':
          description: Invalid role data
        '401':
          description: Missing or invalid token
        '409':
          description: Role already assigned

    get:
      summary: Get user roles
      description: Retrieves all roles assigned to the user based on the JWT token.
      operationId: getRoles
      responses:
        '200':
          description: Roles data returned successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    role_name:
                      type: string
                    assigned_at:
                      type: string
                      format: date-time
                    is_active:
                      type: boolean
        '401':
          description: Missing or invalid token
        '404':
          description: User not found

    delete:
      summary: Delete a role from a user
      description: Deletes a specific role from a user based on the JWT token.
      operationId: deleteRole
      requestBody:
        description: Role deletion data
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                role_name:
                  type: string
                  description: The role to be deleted.
              required:
                - role_name
      responses:
        '200':
          description: Role deleted successfully
        '400':
          description: Invalid role data
        '401':
          description: Missing or invalid token
        '404':
          description: Role not found

  /users/sessions:
    get:
      summary: Get user sessions
      description: Retrieves all active sessions for the user based on the JWT token.
      operationId: getSessions
      responses:
        '200':
          description: Session data returned successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    session_id:
                      type: string
                    created_at:
                      type: string
                      format: date-time
                    expires_at:
                      type: string
                      format: date-time
        '401':
          description: Missing or invalid token
        '404':
          description: User not found

  /users/logout:
    delete:
      summary: Log out of a session
      description: Logs out of a specific session based on the JWT token.
      operationId: logoutSession
      requestBody:
        description: Session logout data
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                session_id:
                  type: string
                  description: The session ID to log out of.
              required:
                - session_id
      responses:
        '200':
          description: Session logged out successfully
        '400':
          description: Invalid session data
        '401':
          description: Missing or invalid token

  /users/drop_tables:
    delete:
      summary: Drop database tables
      description: Deletes specified tables in the database based on the JWT token.
      operationId: dropTables
      requestBody:
        description: Tables to be dropped
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tables:
                  type: array
                  items:
                    type: string
                  description: List of table names to drop.
              required:
                - tables
      responses:
        '200':
          description: Tables deleted successfully
        '400':
          description: Invalid table data or missing 'tables' field
        '401':
          description: Missing or invalid token
  /users/health:
    get:
      summary: Check server health
      description: Check the health of the server and database.
      operationId: healthCheck
      responses:
        '200':
          description: "Service is alive"

components:
  schemas:
    Profile:
      type: object
      properties:
        phone_number:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        birthdate:
          type: string
          format: date
        bio:
          type: string
    Role:
      type: object
      properties:
        role_name:
          type: string
        assigned_at:
          type: string
          format: date-time
        is_active:
          type: boolean
/posts:
    post:
      summary: Create a new post
      operationId: createPost
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostCreate'
      responses:
        '201':
          description: Post created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          description: Invalid post data
        '401':
          description: Unauthorized

    get:
      summary: List posts
      operationId: listPosts
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: List of posts
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Post'
                  pagination:
                    $ref: '#/components/schemas/Pagination'

/posts/{postId}:
    get:
      summary: Get post details
      operationId: getPost
      parameters:
        - $ref: '#/components/parameters/postId'
      responses:
        '200':
          description: Post details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '404':
          description: Post not found

    put:
      summary: Update a post
      operationId: updatePost
      parameters:
        - $ref: '#/components/parameters/postId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostUpdate'
      responses:
        '200':
          description: Post updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '403':
          description: Not authorized to update this post

    delete:
      summary: Delete a post
      operationId: deletePost
      parameters:
        - $ref: '#/components/parameters/postId'
      responses:
        '204':
          description: Post deleted
        '403':
          description: Not authorized to delete this post

/posts/{post_id}/like:
    post:
      summary: Лайк поста
      description: |
        Пользователь ставит «лайк» указанному посту.  
        Требует, чтобы пользователь был авторизован (JWT-cookie + сессия в Auth).
      tags:
        - Posts
      parameters:
        - name: post_id
          in: path
          description: Идентификатор поста
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Успешный лайк
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: string
                    example: Liked
        '401':
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Ошибка сервиса
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

/posts/{post_id}/comment:
    post:
      summary: Добавление комментария к посту
      description: |
        Пользователь комментирует указанный пост.  
        В теле запроса передаётся JSON:
        ```json
        { "text": "Ваш комментарий" }
        ```
        Требует авторизации (JWT-cookie + сессия в Auth).
      tags:
        - Posts
      parameters:
        - name: post_id
          in: path
          description: Идентификатор поста
          required: true
          schema:
            type: string
      requestBody:
        description: Текст комментария
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - text
              properties:
                text:
                  type: string
                  example: "Отличная статья!"
      responses:
        '200':
          description: Комментарий успешно отправлен
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: string
                    example: Comment
        '401':
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Ошибка сервиса
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
